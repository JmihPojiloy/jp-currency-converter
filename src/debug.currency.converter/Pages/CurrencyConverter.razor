@page "/"
@using debug.currency.converter.Data
@inject CurrencyService CurrencyService

<h3 class="mb-4">Currency Converter</h3>

<div class="container">
    <div class="row">
        <div class="col-md-6 fade-in">
            <h4>Available Currencies</h4>
            <button @onclick="RefreshCurrencies" class="btn btn-primary mb-3 btn-block">Refresh</button>
            
            @if (isLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            else
            {
                <div class="fade-in">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>From Currency</th>
                                <th>To Currency</th>
                                <th>Rate</th>
                                <th>Fee</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var currency in availableCurrencies)
                            {
                                <tr>
                                    <td>@currency.BCurrency</td>
                                    <td>@currency.TCurrency</td>
                                    <td>@currency.Rate</td>
                                    <td>@currency.Fee</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
        
        <div class="col-md-6 fade-in" style="margin-top: 0;">
            <div class="form-group">
                <label for="fromCurrency">From Currency:</label>
                <select @bind="fromCurrency" class="form-control">
                    <option value="">Select Currency</option>
                    @foreach (var currency in allCurrencies)
                    {
                        <option value="@currency">@currency</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="toCurrency">To Currency:</label>
                <select @bind="toCurrency" class="form-control">
                    <option value="">Select Currency</option>
                    @foreach (var currency in allCurrencies)
                    {
                        <option value="@currency">@currency</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="amount">Amount:</label>
                <input @bind="amount" type="number" class="form-control" />
            </div>

            <button @onclick="CalculateExchange" class="btn btn-primary btn-block">Calculate</button>

            @if (showCrossRate)
            {
                <div class="form-group">
                    <label>Select intermediate currency:</label>
                    <select @bind="intermediateCurrency" class="form-control">
                        <option value="">Select Currency</option>
                        <option value="RUB">RUB</option>
                        <option value="KZT">KZT</option>
                    </select>
                    <button @onclick="CalculateWithCrossRate" class="btn btn-secondary btn-block mt-2">Calculate with cross-rate</button>
                </div>
            }
            
            <button @onclick="ResetFields" class="btn btn-warning btn-block mt-3">Reset</button>
            
            <div class="mt-3">
                @if (calculatedResult != null)
                {
                    <p>Exchange Result: @calculatedResult</p>
                }
            </div>

            @if (errorMessage != null)
            {
                <div class="text-danger mt-2">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private List<CurrencyViewModel> availableCurrencies = new();
    private List<string> allCurrencies = new();
    private string fromCurrency;
    private string toCurrency;
    private string intermediateCurrency;
    private decimal amount;
    private string? calculatedResult;
    private string? errorMessage;
    private bool showCrossRate = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshCurrencies();
    }

    private async Task RefreshCurrencies()
    {
        isLoading = true;
        availableCurrencies = CurrencyService.GetAllCurrencies();
        allCurrencies = CurrencyService.GetAllCurrencyNames();
        isLoading = false;
    }

    private async Task CalculateExchange()
    {
        if (string.IsNullOrWhiteSpace(fromCurrency) || string.IsNullOrWhiteSpace(toCurrency) || amount <= 0)
        {
            errorMessage = "Please select both currencies and enter a valid amount.";
            return;
        }

        var currency = CurrencyService.GetCurrencyRate(fromCurrency, toCurrency);
        if (currency == null)
        {
            errorMessage = "Currency pair not found. Please select an intermediate currency for cross-rate.";
            showCrossRate = true;
            return;
        }

        errorMessage = null;
        var sum = amount * currency.Rate;
        var fee = (sum * currency.Fee) / 100;
        var result = Math.Round((decimal)(sum + fee)!, 2);
        calculatedResult = $"{result} {fromCurrency}";
    }

    private async Task CalculateWithCrossRate()
    {
        if (string.IsNullOrWhiteSpace(intermediateCurrency))
        {
            errorMessage = "Please select an intermediate currency.";
            return;
        }

        var crossRate = CurrencyService.GetCrossCurrencies(intermediateCurrency, fromCurrency, toCurrency);
        if (crossRate == null)
        {
            errorMessage = "Cross rate for the selected currencies not found.";
            return;
        }

        errorMessage = null;
        var sum = amount * crossRate.Rate;
        var fee = (sum * crossRate.Fee) / 100;
        var result = Math.Round((decimal)(sum + fee)!, 2);
        calculatedResult = $"{result} {fromCurrency}";
    }

    private void ResetFields()
    {
        fromCurrency = string.Empty;
        toCurrency = string.Empty;
        amount = 0;
        calculatedResult = null;
        errorMessage = null;
        intermediateCurrency = string.Empty;
        showCrossRate = false;
    }
}
